(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-AMOUNT u101)
(define-constant ERR-TRANSFER-FAILED u102)
(define-constant ERR-MINT-FAILED u103)
(define-constant ERR-BURN-FAILED u104)
(define-constant ERR-PAUSE-NOT-ALLOWED u105)
(define-constant ERR-ALREADY-PAUSED u106)
(define-constant ERR-NOT-PAUSED u107)
(define-constant ERR-BLACKLISTED u108)
(define-constant ERR-NOT-BLACKLISTED u109)
(define-constant ERR-WHITELIST-REQUIRED u110)
(define-constant ERR-NOT-WHITELISTED u111)
(define-constant ERR-ROLE-NOT-SET u112)
(define-constant ERR-INVALID-ROLE u113)
(define-constant ERR-BATCH-EXCEEDED u114)
(define-constant ERR-ZERO-ADDRESS u115)
(define-constant ERR-INSUFFICIENT-BALANCE u116)
(define-constant ERR-APPROVAL-FAILED u117)
(define-constant ERR-INCREASE-ALLOWANCE-FAILED u118)
(define-constant ERR-DECREASE-ALLOWANCE-FAILED u119)
(define-constant ERR-SUPPLY-EXCEEDED u120)
(define-constant ERR-MINT-CAP-EXCEEDED u121)

(define-fungible-token mdrs-token)

(define-data-var total-supply uint u0)
(define-data-var mint-cap uint u1000000000000)
(define-data-var paused bool false)
(define-data-var minter-role principal tx-sender)
(define-data-var pauser-role principal tx-sender)
(define-data-var blacklist-admin principal tx-sender)

(define-map balances { account: principal } uint)
(define-map allowances { owner: principal, spender: principal } uint)
(define-map blacklists { account: principal } bool)
(define-map whitelists { account: principal } bool)

(define-read-only (get-name)
  (ok "MatchDay Revenue Share Token")
)

(define-read-only (get-symbol)
  (ok "MDRS")
)

(define-read-only (get-decimals)
  (ok u6)
)

(define-read-only (get-balance (account principal))
  (ok (ft-get-balance mdrs-token account))
)

(define-read-only (get-total-supply)
  (ok (ft-get-balance mdrs-token .mdrs-token))
)

(define-read-only (get-allowance (owner principal) (spender principal))
  (ok (unwrap! (map-get? allowances { owner: owner, spender: spender }) u0))
)

(define-read-only (is-paused)
  (ok (var-get paused))
)

(define-read-only (is-blacklisted (account principal))
  (ok (default-to false (map-get? blacklists { account: account })))
)

(define-read-only (is-whitelisted (account principal))
  (ok (default-to false (map-get? whitelists { account: account })))
)

(define-read-only (has-minter-role (who principal))
  (ok (is-eq who (var-get minter-role)))
)

(define-read-only (has-pauser-role (who principal))
  (ok (is-eq who (var-get pauser-role)))
)

(define-read-only (has-blacklist-role (who principal))
  (ok (is-eq who (var-get blacklist-admin)))
)

(define-private (require-not-paused)
  (asserts! (not (var-get paused)) (err ERR-NOT-PAUSED))
  (ok true)
)

(define-private (require-not-blacklisted (account principal))
  (asserts! (not (default-to false (map-get? blacklists { account: account }))) (err ERR-BLACKLISTED))
  (ok true)
)

(define-private (require-whitelisted (account principal))
  (let ((wl (default-to false (map-get? whitelists { account: account }))))
    (asserts! (or (not (var-get paused)) wl) (err ERR-WHITELIST-REQUIRED))
    (ok true)
  )
)

(define-private (require-minter-role)
  (asserts! (is-eq tx-sender (var-get minter-role)) (err ERR-NOT-AUTHORIZED))
  (ok true)
)

(define-private (require-pauser-role)
  (asserts! (is-eq tx-sender (var-get pauser-role)) (err ERR-NOT-AUTHORIZED))
  (ok true)
)

(define-private (require-blacklist-role)
  (asserts! (is-eq tx-sender (var-get blacklist-admin)) (err ERR-NOT-AUTHORIZED))
  (ok true)
)

(define-private (safe-transfer (amount uint) (from principal) (to principal))
  (begin
    (asserts! (not (is-eq from to)) (err ERR-ZERO-ADDRESS))
    (asserts! (> amount u0) (err ERR-INVALID-AMOUNT))
    (asserts! (>= (unwrap! (get-balance from) u0) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-transfer? mdrs-token amount from to))
    (ok true)
  )
)

(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))
  (begin
    (try! (require-not-paused))
    (try! (require-not-blacklisted sender))
    (try! (require-not-blacklisted recipient))
    (try! (require-whitelisted sender))
    (try! (require-whitelisted recipient))
    (try! (safe-transfer amount sender recipient))
    (print { type: "transfer", amount: amount, from: sender, to: recipient })
    (ok true)
  )
)

(define-public (transfer-from (amount uint) (owner principal) (spender principal) (recipient principal))
  (let ((current-allowance (unwrap! (map-get? allowances { owner: owner, spender: spender }) u0)))
    (begin
      (try! (require-not-paused))
      (try! (require-not-blacklisted owner))
      (try! (require-not-blacklisted spender))
      (try! (require-not-blacklisted recipient))
      (try! (require-whitelisted owner))
      (try! (require-whitelisted spender))
      (try! (require-whitelisted recipient))
      (asserts! (<= amount current-allowance) (err ERR-INSUFFICIENT-BALANCE))
      (try! (safe-transfer amount owner recipient))
      (map-set allowances { owner: owner, spender: spender }
        (- current-allowance amount)
      )
      (print { type: "transfer_from", amount: amount, from: owner, spender: spender, to: recipient })
      (ok true)
    )
  )
)

(define-public (approve (spender principal) (amount uint))
  (begin
    (try! (require-not-paused))
    (try! (require-not-blacklisted tx-sender))
    (try! (require-whitelisted tx-sender))
    (map-set allowances { owner: tx-sender, spender: spender } amount)
    (print { type: "approval", owner: tx-sender, spender: spender, amount: amount })
    (ok true)
  )
)

(define-public (increase-allowance (spender principal) (added-value uint))
  (let ((current-allowance (unwrap! (map-get? allowances { owner: tx-sender, spender: spender }) u0)))
    (begin
      (try! (require-not-paused))
      (try! (require-not-blacklisted tx-sender))
      (try! (require-whitelisted tx-sender))
      (let ((new-allowance (+ current-allowance added-value)))
        (map-set allowances { owner: tx-sender, spender: spender } new-allowance)
        (print { type: "increase_allowance", owner: tx-sender, spender: spender, added: added-value, new: new-allowance })
        (ok true)
      )
    )
  )
)

(define-public (decrease-allowance (spender principal) (subtracted-value uint))
  (let ((current-allowance (unwrap! (map-get? allowances { owner: tx-sender, spender: spender }) u0)))
    (begin
      (try! (require-not-paused))
      (try! (require-not-blacklisted tx-sender))
      (try! (require-whitelisted tx-sender))
      (asserts! (>= current-allowance subtracted-value) (err ERR-INVALID-AMOUNT))
      (let ((new-allowance (- current-allowance subtracted-value)))
        (map-set allowances { owner: tx-sender, spender: spender } new-allowance)
        (print { type: "decrease_allowance", owner: tx-sender, spender: spender, subtracted: subtracted-value, new: new-allowance })
        (ok true)
      )
    )
  )
)

(define-public (mint (to principal) (amount uint))
  (begin
    (try! (require-minter-role))
    (try! (require-not-paused))
    (asserts! (not (is-eq to .mDRS-revenue-token)) (err ERR-ZERO-ADDRESS))
    (asserts! (> amount u0) (err ERR-INVALID-AMOUNT))
    (let ((new-total (+ (var-get total-supply) amount)))
      (asserts! (<= new-total (var-get mint-cap)) (err ERR-MINT-CAP-EXCEEDED))
      (try! (ft-mint? mdrs-token amount to))
      (var-set total-supply new-total)
      (print { type: "mint", to: to, amount: amount })
      (ok true)
    )
  )
)

(define-public (burn (from principal) (amount uint))
  (begin
    (try! (require-not-paused))
    (try! (require-not-blacklisted from))
    (try! (require-whitelisted from))
    (asserts! (> amount u0) (err ERR-INVALID-AMOUNT))
    (try! (ft-burn? mdrs-token amount from))
    (var-set total-supply (- (var-get total-supply) amount))
    (print { type: "burn", from: from, amount: amount })
    (ok true)
  )
)

(define-public (batch-transfer (transfers (list 200 { to: principal, amount: uint })))
  (begin
    (try! (require-not-paused))
    (try! (require-not-blacklisted tx-sender))
    (try! (require-whitelisted tx-sender))
    (asserts! (<= (len transfers) u200) (err ERR-BATCH-EXCEEDED))
    (fold batch-transfer-iter transfers (ok u0))
  )
)

(define-private (batch-transfer-iter (transfer { to: principal, amount: uint }) (prior (response uint uint)))
  (match prior
    ok-prior
      (if (is-eq (get to transfer) .mDRS-revenue-token)
        (err ERR-ZERO-ADDRESS)
        (begin
          (try! (require-not-blacklisted (get to transfer)))
          (try! (require-whitelisted (get to transfer)))
          (try! (safe-transfer (get amount transfer) tx-sender (get to transfer)))
          (ok (+ ok-prior (get amount transfer)))
        )
      )
    err-prior err-prior
  )
)

(define-public (pause)
  (begin
    (try! (require-pauser-role))
    (asserts! (not (var-get paused)) (err ERR-ALREADY-PAUSED))
    (var-set paused true)
    (print { type: "pause" })
    (ok true)
  )
)

(define-public (unpause)
  (begin
    (try! (require-pauser-role))
    (asserts! (var-get paused) (err ERR-NOT-PAUSED))
    (var-set paused false)
    (print { type: "unpause" })
    (ok true)
  )
)

(define-public (blacklist (account principal))
  (begin
    (try! (require-blacklist-role))
    (asserts! (not (is-eq account .mDRS-revenue-token)) (err ERR-ZERO-ADDRESS))
    (map-set blacklists { account: account } true)
    (print { type: "blacklist", account: account })
    (ok true)
  )
)

(define-public (unblacklist (account principal))
  (begin
    (try! (require-blacklist-role))
    (asserts! (not (is-eq account .mDRS-revenue-token)) (err ERR-ZERO-ADDRESS))
    (map-set blacklists { account: account } false)
    (print { type: "unblacklist", account: account })
    (ok true)
  )
)

(define-public (whitelist (account principal))
  (begin
    (try! (require-blacklist-role))
    (asserts! (not (is-eq account .mDRS-revenue-token)) (err ERR-ZERO-ADDRESS))
    (map-set whitelists { account: account } true)
    (print { type: "whitelist", account: account })
    (ok true)
  )
)

(define-public (unwhitelist (account principal))
  (begin
    (try! (require-blacklist-role))
    (asserts! (not (is-eq account .mDRS-revenue-token)) (err ERR-ZERO-ADDRESS))
    (map-set whitelists { account: account } false)
    (print { type: "unwhitelist", account: account })
    (ok true)
  )
)

(define-public (set-minter-role (new-minter principal))
  (begin
    (try! (require-pauser-role))
    (asserts! (not (is-eq new-minter .mDRS-revenue-token)) (err ERR-ZERO-ADDRESS))
    (var-set minter-role new-minter)
    (print { type: "set_minter_role", new-minter: new-minter })
    (ok true)
  )
)

(define-public (set-pauser-role (new-pauser principal))
  (begin
    (try! (require-pauser-role))
    (asserts! (not (is-eq new-pauser .mDRS-revenue-token)) (err ERR-ZERO-ADDRESS))
    (var-set pauser-role new-pauser)
    (print { type: "set_pauser_role", new-pauser: new-pauser })
    (ok true)
  )
)

(define-public (set-blacklist-admin (new-admin principal))
  (begin
    (try! (require-pauser-role))
    (asserts! (not (is-eq new-admin .mDRS-revenue-token)) (err ERR-ZERO-ADDRESS))
    (var-set blacklist-admin new-admin)
    (print { type: "set_blacklist_admin", new-admin: new-admin })
    (ok true)
  )
)

(define-public (set-mint-cap (new-cap uint))
  (begin
    (try! (require-pauser-role))
    (asserts! (> new-cap u0) (err ERR-INVALID-AMOUNT))
    (var-set mint-cap new-cap)
    (print { type: "set_mint_cap", new-cap: new-cap })
    (ok true)
  )
)